{% extends 'base.html.twig' %}

{% block title %}Hello MainController!{% endblock %}

{% block body %}

    {% for flashMessage in app.flashes('success') %}
        <div class="alert alert-success">{{ flashMessage }}</div>
    {% endfor %}


    {% if app.user %}
        <br>
        <h5>Date du jour : {{ 'now' | date('d/m/Y', 'Europe/Paris') }}</h5>
        <br>
        <h5>Participant : {{ app.user.username }}</h5>
<br>
        {{ form_start(sortieForm) }}
        <div class="container d-flex">
            {{ form_label(sortieForm.campus) }}
            {{ form_widget(sortieForm.campus,{'attr': {'class': 'form-control'}}) }}

            {{ form_label(sortieForm.name) }}
            {{ form_widget(sortieForm.name,{'attr': {'class': 'form-control'}}) }}
        </div>
        <div class="container d-flex">

            {{ form_label(sortieForm.dateUn) }}
            {{ form_widget(sortieForm.dateUn,{'attr': {'class': 'form-control'}}) }}

            {{ form_label(sortieForm.dateDeux) }}
            {{ form_widget(sortieForm.dateDeux,{'attr': {'class': 'form-control'}}) }}
        </div>

        <div class="container d-flex flex-column">

            {{ form_label(sortieForm.scales) }}
            {{ form_widget(sortieForm.scales) }}

            {{ form_label(sortieForm.horns) }}
            {{ form_widget(sortieForm.horns) }}

            {{ form_label(sortieForm.horns_not_registered) }}
            {{ form_widget(sortieForm.horns_not_registered) }}

            {{ form_label(sortieForm.past_outings) }}
            {{ form_widget(sortieForm.past_outings) }}

            {{ form_row(sortieForm.userId) }}

        </div>
        <br>
        <div class="container-fluid d-flex show justify-content-center">

            <input class="btn btn-lg btn-primary" type="submit" value="Rechercher">
        </div>
<br>
<br>

        {{ form_end(sortieForm) }}

        <div class="container" id="map" data-sorties="{{ sorties|json_encode|e('html_attr') }}"></div>

        <div class="affichage sortie">
            <section class="container list">
                <table class="table table-hover">
                    <thead>
                    <tr>
                        <th scope="col">Nom</th>
                        <th scope="col">Date</th>
                        <th scope="col">Cloture</th>
                        <th scope="col">Inscrits / places</th>
                        <th scope="col">Etat</th>
                        <th scope="col">Inscrit</th>
                        <th scope="col">Organisateur</th>
                        <th scope="col">Actions</th>
                    </tr>
                    </thead>
                    <tbody>

                    {% for sortie in sorties %}
                        <tr>
                            <td><a class="list-group-item list-group-item-action"
                                   href="{{ path('sortiev2_show', {'id': sortie.id}) }}"> {{ sortie.name }}</td>
                            <td><a class="list-group-item list-group-item-action"
                                   href="{{ path('sortiev2_show', {'id': sortie.id}) }}"> {{ sortie.firstAirDate | date('d/m/y H:i') }}
                            </td>
                            <td><a class="list-group-item list-group-item-action"
                                   href="{{ path('sortiev2_show', {'id': sortie.id}) }}"> {{ sortie.dateLimiteInscription | date('d/m/y') }}
                            </td>
                            <td><a class="list-group-item list-group-item-action"
                                   href="{{ path('sortiev2_show', {'id': sortie.id}) }}"> {{ sortie.users | length }}
                                    / {{ sortie.nbInscriptionMax }}</td>
                            <td><a class="list-group-item list-group-item-action"
                                   href="{{ path('sortiev2_show', {'id': sortie.id}) }}"> {{ sortie.etat.libelle }}</td>
                            {% if app.user in sortie.users %}
                                <td><a class="list-group-item list-group-item-action"
                                       href="{{ path('sortiev2_show', {'id': sortie.id}) }}"> ✅</td>
                            {% else %}
                                <td><a class="list-group-item list-group-item-action"
                                       href="{{ path('sortiev2_show', {'id': sortie.id}) }}"></td>
                            {% endif %}
                            <td><a class="list-group-item list-group-item-action"
                                   href="{{ path('sortiev2_show', {'id': sortie.id}) }}"> {{ sortie.user.username }}
                            </td>
                            <td>

{#                                {% if app.user == sortie.user or 'ROLE_ADMIN' in app.user.roles %}#}
                                {% if app.user == sortie.user%}
                                    {% if sortie.etat.id < 3 %}
                                        <a class="list-group-item-action"
                                           href="{{ path('sortie_update', {'id': sortie.id}) }}"> Modifier </a>
                                    {% endif %}
                                {% else %}
                                    {% if 'ROLE_ADMIN' in app.user.roles and sortie.etat.id < 3%}
                                        <a class="list-group-item-action"
                                           href="{{ path('sortie_update', {'id': sortie.id}) }}"> Modifier </a>
                                    {% endif %}
                                    {% if app.user in sortie.users %}
                                        {% if sortie.dateLimiteInscription >= date() or sortie.firstAirDate >= date() %}
                                            {% if 'ROLE_ADMIN' in app.user.roles %}
                                                <a> - </a>
                                            {% endif %}
                                            <a class=" list-group-item-action"
                                               href="{{ path('inscription_user', {'id': sortie.id}) }}"> Se désinscrire </a>
                                        {% endif %}
                                    {% else %}

                                        {% if sortie.etat.libelle == 'Ouverte' and sortie.dateLimiteInscription > date() and sortie.users | length < sortie.nbInscriptionMax %}
                                            {% if 'ROLE_ADMIN' in app.user.roles %}
                                                <a> - </a>
                                            {% endif %}
                                            <a class=" list-group-item-action"
                                               href="{{ path('inscription_user', {'id': sortie.id}) }}"> S'inscrire </a>
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}

                    </tbody>
                </table>
            </section>

        </div>
        <div class="container-fluid d-flex justify-content-center">
            <a class="link_button btn btn-outline-secondary" href="{{ path('sortie_create') }}" role="button">Créer une
                sortie</a>
        </div>



    {% else %}
        <br>
        <div class="example-wrapper">
            <h1>Bienvenue aux sorties de l'ENI 2023 </h1>
            <br>
            <br>
            <br>
            <a class="link_button btn btn-outline-secondary" href="{{ path('app_login') }}" role="button">Connecte
                toi</a>
        </div>


    {% endif %}


    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
    <script>
        let map = L.map('map',{dragging: true}).setView([47.2, 2.333], 6);

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        // let marker = new  L.marker([47,2],{
        //     draggable: true,
        //     dragging:true,
        //     autoPan: true ,
        //     autoPanPadding: [100,100] }).addTo(map);

        const mapElement = document.getElementById('map');
        const sortiesData = JSON.parse(mapElement.dataset.sorties);
        console.log(sortiesData);

        if (sortiesData.length > 0) {
            const premiereSortie = sortiesData[0];
            const nomPremiereSortie = premiereSortie.name;
            console.log(premiereSortie);
        } else {
            console.log("Aucune sortie disponible.");
        }

        var newStr = null;
        input.addEventListener('input', function() {
            const userInput = input.value;

            console.log('Donnée saisie par l\'utilisateur :', userInput);
            newStr = userInput.replace(' ', '+');
        });

        const selectElement = document.querySelector('#sorties_ville_select');
        let marker = null;

        let lat=null;
        let lon=null;

        selectElement.addEventListener('change', async function () {
            const selectedOption = this.options[this.selectedIndex];
            const selectedContent = selectedOption.innerHTML;
            console.log('Contenu de l\'option sélectionnée :', selectedContent);
            const result = newStr + "+" + selectedContent;
            console.log(await callApi(result))
            var data = await callApi(result);
            console.log(data.features[0].geometry.coordinates)
            console.log(data.features[0].geometry.coordinates[0])
            document.getElementById('sorties_Latitude').value = data.features[0].geometry.coordinates[0]
            document.getElementById('sorties_Longitude').value = data.features[0].geometry.coordinates[1]

            lat=data.features[0].geometry.coordinates[0]
            lon=data.features[0].geometry.coordinates[1]

            if (marker) {
                marker.remove();
            }

            marker = new  L.marker([lon,lat],{
                draggable: false,
                dragging:false,
                autoPan: true ,
                autoPanPadding: [100,100] }).addTo(map);
            console.log(marker)
            console.log(map);

            map.setView([data.features[0].geometry.coordinates[1], data.features[0].geometry.coordinates[0]], 13);


            // Autres opérations avec le contenu de l'option sélectionnée...
        });

        async function callApi(result){
            let response = await fetch(`https://api-adresse.data.gouv.fr/search/?q=${result}`)
            if (response.ok){
                return response.json()
            }
        }


    </script>

{% endblock %}
